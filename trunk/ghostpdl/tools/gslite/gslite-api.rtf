{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fnil\fcharset77 Constantia;\f1\fnil\fcharset77 Constantia-Bold;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11340\viewh12480\viewkind0
\deftab720
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
The GSLite API\
version 0.4\
Artifex Software, Inc.\
26 Oct 2006\
\
\page \pard\tx225\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 The GSLite API\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
GSLite is a simple, lightweight API for accessing some features of the Ghostscript graphics library, most importantly the font rendering and image decoding features. It is implemented as a thin wrapper over the significantly more complex and general Ghostscript graphics library interface, which is designed to support all imaging operations used in modern Page Description Languages.\
\
In this beta release, GSLite is provided as an additional layer on top of the full Ghostscript distribution. Production versions will contain a fairly small subset of the Ghostscript codebase, as needed to support the GSLite API. Clients should call GSLite functions exclusively, rather than directly into the Ghostscript graphics library, to allow maximum streamlining of the production GSLite implementation.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 Initialization and library object lifecycle\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
Before using any other GSLite functions, the client must initialize the library, using the gslt_init_library() call. This function initializes a single static context; GSLite does not presently support multiple reentrant contexts. The client may also call gslt_free_library() at process termination to free up resources.\
\
In addition to the library context, font rendering operations require a graphics state (gs_state), which in turn requires a Ghostscript \'d2device\'d3 data structure (gx_device). In ordinary Ghostscript usage, this device represents a page buffer for imaging operations, but such a page buffer is not required for font rendering and image decoding, so GSLite clients will use the \'d2nullpage\'d3 device.\
\
The detailed calling instructions follow.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 To use GSLite, the first thing you need to do is to initialize the library:\
\
	gs_memory_t * gslt_init_library();\
\
This returns an allocator handle for internal use by the gslite routines and the underlying implementation in the graphics library. You need to pass this allocator to many functions. You do not have to use it yourself; it is perfectly safe to use malloc() and free() for your own code.\
\
The font rendering implementation in Ghostscript requires a device structure and a graphics state structure. The graphics state is used for font rendering internal operations. The graphics state is tied to a device structure, and contains a pointer to it.\
\
Create these two structures at program startup. Pass in "nullpage" as the device name.\
\
	gx_device * gslt_init_device(gs_memory_t *mem, char *name);\
\
	gs_state *gslt_init_state(gs_memory_t *mem, gx_device *dev);\
\
There are functions to clean up the Ghostscript library and the three global objects. Call these in the correct order before the program exits.\
\
	void gslt_free_state(gs_memory_t *mem, gs_state *pgs);\
	void gslt_free_device(gs_memory_t *mem, gx_device *dev);\
	void gslt_free_library(gs_memory_t *mem);\
\
Here is an example of how to use the gslite library:\
\
int main(int argc, char **argv)\
\{\
	gs_memory *mem = gslt_init_library();\
	if (!mem)\
		die("cannot create gslite allocator");\
\
	gx_device *dev = gslt_init_device(mem, "nullpage");\
	if (!dev)\
		die("cannot create gslite device");\
\
	gs_state *pgs = gslt_init_state(mem, dev);\
	if (!pgs)\
		die("cannot create gslite state");\
\
	/* do some work */\
\
	gslt_free_state(mem, pgs);\
	gslt_free_device(mem, dev);\
	gslt_free_library(mem, dev, pgs);\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 The Image Codec API\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
There is no need to create the device and graphics state objects for the image codecs; they only require the allocator.\
\
There are three defined colorspaces for the image codec API: gray, RGB and CMYK. They come in two variants each: with and without an alpha channel. The variants are enumerated with the type gslt_image_colorspace:\
\
	typedef enum \{\
		GSLT_GRAY,\
		GSLT_GRAY_A,\
		GSLT_RGB,\
		GSLT_RGB_A,\
		GSLT_CMYK, \
		GSLT_CMYK_A\
	\} gslt_image_colorspace;\
\
The function to decode an image takes three parameters: the allocator, a buffer with the encoded image data as loaded from disk, and the length of this buffer.\
\
	gslt_image_t *gslt_image_decode(gs_memory_t *mem,\
							unsigned char *buf, int len);\
\
It returns an image object or NULL if it fails to decode the image.\
\
The image object is a struct:\
\
	struct gslt_image_s\
	\{\
    		int width;\
		int height;\
		int stride; /* byte offset between image data rows */\
		int components;\
		int bits;\
		int xres;   /* horizontal resolution in pixels per meter */\
		int yres;   /* vertical resolution */\
		char *samples; /* image data buffer */\
		gslt_image_colorspace colorspace;\
	\};\
\
The samples field points to the decoded image data. The data is in a format described by the other fields of the struct. Stride is the number of bytes separating each row of image data, and bits is the number of bits per component. The number of bits can be 1, 2, 4, 8 or 16. For 16 bits per component, treat the data as an array of shorts in native byte order. The number of components includes the alpha channel, so it is 3 for GSLT_RGB and 4 for GSLT_RGB_A.\
\
Release the image object and decoded data with:\
\
	void gslt_image_free(gs_memory_t *mem, gslt_image_t *image);\
\
The image decoder takes the entire image file and returns the decoded image data in single memory buffers. This design choice simplifies the API considerably, avoiding the need for complex stream operations.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 The Font API\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
The GSLite API for font rendering is designed to support OpenType fonts. The underlying Ghostscript font rendering mechanism supports many other font types as needed for PostScript and PDF, including Type1, CID, and composite fonts, but these would involve considerable extra complexity and so are not supported by GSLite. OpenType is a font format that is based on TrueType; in practice it is a superset of TrueType. Most PostScript and PDF fonts can be transformed into OpenType without loss of fidelity.\
\
The primary functions supported by the API are:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li360\fi-360\ri0\ql\qnatural
\cf0 \'a5	Access to the font's encoding, mapping a character (usually expressed as a Unicode codepoint) to a glyph index.\
\'a5	Determining the metrics for a glyph, specified by index.\
\'a5	Rendering a glyph into a bitmap, given glyph index and transform.\
\'a5	Obtaining an outline for the glyph.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 \
The functions in the font API that return an integer will return zero on success and a negative number on failure, unless otherwise specified.\
\
The GSLite font API has a caching mechanism for glyph bitmaps, significantly speeding up cases where the same glyph is requested repeatedly. The results of all glyph rendering operations are stored as bitmaps in the cache. The renderer may determine that the bitmap is too large to fit in the cache, in which case it returns an error code (-2), signalling the client that it should obtain an outline, and use its own vector path filling capabilities to render the glyph.\
\
At present, the functions for creating this cache choose reasonable defaults for cache size and rendering options, but more configuration options may be provided in the future. To create the cache, use these calls:\
\
	gs_font_dir * gslt_new_font_cache(gs_memory_t *mem);\
\
	void gslt_free_font_cache(gs_memory_t *mem, gs_font_dir *cache);\
\
Create the gslite font object from a memory buffer containing the file data. The font object keeps a pointer to this data, so do not free it until after you free the font object. You will also need to pass in the writing mode to be used with this font. Use zero for horizontal writing and 1 for vertical writing.\
\
	gslt_font_t * gslt_new_font(gs_memory_t *mem, gs_font_dir *cache,\
							char *rbuf, int rlen, int wmode);\
\
	void gslt_free_font(gs_memory_t *mem, gslt_font_t *font);\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 Encodings\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
A TrueType font is a collection of tables. Some of these tables specify the metrics, others specify the outlines. One of the tables that are important for our purposes, is the table that specifies encodings. This table is called the "cmap" table. This table can hold many encodings.\
\
An encoding in this table is specified by two numbers. If the font has a Unicode encoding, it will have the identifier (3,1). The TrueType and OpenType specifications contain more details on allowed encodings.\
\
Some common encodings are:\
\
    3,0		Microsoft Symbol\
    3,1		Microsoft Unicode (used for WGL4)\
    3,2		Microsoft SJIS\
    3,3		Microsoft GB2312\
    3,4		Microsoft Big5\
    3,5		Microsoft Wansung\
    3,6		Microsoft Johab\
    3,10	Microsoft UCS4\
\
    1,0		Apple Roman\
    1,1		Apple Japanese\
    1,2		Apple Traditional Chinese\
    1,3		Apple Korean\
\
There is a function to count the number of encodings in the cmap table.\
\
	int gslt_count_font_encodings(gslt_font_t *font);\
\
Use the count to iterate over the encodings. The encoding identification function takes the index and returns the two numbers that identify the encoding. See the truetype specification for the meaning of these two numbers.\
\
	int gslt_identify_font_encoding(gslt_font_t *font, int idx,\
							int *pid, int *eid);\
\
Finally, we can select one of these encodings for use later.\
\
	int gslt_select_font_encoding(gslt_font_t *font, int idx);\
\
In truetype fonts the glyphs are numbered from zero. Glyph zero has a special meaning as the glyph that represents undefined characters. Any character that cannot be encoded will be mapped to glyph zero.\
\
	int gslt_encode_font_char(gslt_font_t *font, int codepoint);\
\
The codepoint argument is an integer that represents a character code in the currently selected encoding. If you have selected encoding (3,0) then the codepoint is a unicode character. If you have selected encoding (1,0) then the codepoint is a mac roman encoded character.\
\
The function returns the glyph index of the encoded character. If the font does not provide the encoding you are using, you will have to use your own tables to map characters to a codepoint in an encoding the font does support before passing them to gslt_encode_font_char. [TODO microsoft is not clear on what to do when fonts don't have a 3,1 cmap; but they do state (SHOULD) that it is a possibility]\
\
You can also use the glyph indices directly, if you have some other means to know which glyph indices to use, such as the Indices attribute of the <Glyphs> element in XPS. When glyph indices are known,  gslt_encode_font_char is not needed.\
\
For XPS fonts with an encoding table (3, 0) are treated specially. If the code point encodes to the undefined glyph, another attempt is made by first adding 0xf000 to the code point before looking it up again. This is handled by gslt whenever a cmap (3, 0) is selected. \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 Encoding XPS strings\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
XPS Glyph tags represent text on the page. The tag has two attributes that affect how we select the font glyphs to use when drawing the glyph element.\
\
The first one is UnicodeString. It contains the text that the tag represents in Unicode format. For trivial uses, this is enough information to select the glyphs. For each code point we can look it up in the font encoding and get the corresponding glyph.\
\
However, not all typeset text will be as straightforward. For instance, the "fi" ligature will map two unicode characters (f followed by i) to one glyph (fi). This transform can not be represented by the cmap table. These transforms are done by using smart font layout table features in OpenType. This is not done by the XPS renderer. The creator of the XPS file has to do this.\
\
In order to represent ligatures and more advanced typographical features, we need the second attribute in the <Glyph> element: Indices. Indices is used in parallel with UnicodeString to select glyphs that represent the Unicode characters.\
\
The Indices string contains cluster maps that map one-to-many and many-to-one; and also indices to glyphs that are not encoded by the cmap. The indices are the glyph indices for the font. You can use the indices directly; there is no need to encode them or pass them through gslt_encode_font_char.\
\
A ligature would be represented by a cluster map that says that the two characters 'f' and 'i' in the UnicodeString should map to the one (hypothetical) glyph index 1234. In this case you should ignore the 'f' and 'i' in the UnicodeString and use the glyph index specified by the cluster map instead.\
\
See the XPS specification for more details.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 Glyph metrics\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
Once you have the list of glyphs, you will need to figure out their position on the page. Each glyph has the following metrics:\
\
	struct gslt_glyph_metrics_s\
	\{\
		float hadv, vadv, vorg;\
	\};\
\
	int gslt_measure_font_glyph(gs_state *pgs, gslt_font_t *font,\
							int gid, gslt_glyph_metrics_t *mtx);\
\
The metrics are untransformed, and will typically lie in the range 0..1.\
\
A glyph is drawn from its origin, which is at the bottom left of the glyph. This is used for horizontal writing; for vertical writing the origin should be at the middle top of the glyph.\
\
The origin offset is a vector that needs to be added to the pen position when drawing the glyph. The vorg field specifies the origin offset in the y direction, and the x origin offset is obtained by dividing hadv by two.  This will adjust the horizontal writing origin to the vertical writing origin. This is only to be used for vertical (IsSideways) written text.\
\
The hadv and vadv field specifies the advance width, or escapement, for horizontal and vertical writing. This is the distance the pen should be moved to position the following glyph. Use the appropriate field depending on the IsSideways attribute.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 Rendering bitmaps\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
With the list of glyph indices and their positions on the page in hand, it will be time to draw them.\
\
	struct gslt_glyph_bitmap_s\
	\{\
		int w, h, stride;\
		int lsb, top;\
		unsigned char *data;\
	\};\
\
	int gslt_render_font_glyph(gs_state *pgs, gslt_font_t *font,\
							gs_matrix *tm, int gid,\
							gslt_glyph_bitmap_t *slot);\
\
	void gslt_retain_font_glyph(gs_memory_t *mem, gslt_glyph_bitmap_t *slot);\
	void gslt_release_font_glyph(gs_memory_t *mem, gslt_glyph_bitmap_t *slot);\
\
\
This function will attempt to find a rendered bitmap with the same font, matrix and glyph index in the cache (the same cache as was used to create the font object). If it fails, it will try to render the bitmap and store it in the cache, then return that bitmap.\
\
The bitmap data returned is a pointer to the cache. Therefore, you must not overwrite the data, or it may give provide incorrect results to future calls. Similarly, subsequent rendering calls may evict the data from the cache, so validity is only guaranteed until the next rendering call or library free call. If a more persistent lifetime is desired, copy the data.\
\
The lsb and top fields specify the position of the bitmap relative to the pen position for the horizontal origin.\
\
The cache has a limited amount of space to work with. If you try to render a bitmap that is too large, the rendering function will return -2. In that case, you will have to fall back to your own path rendering functions, using the outline data.\
\
The bitmap data points to an internal slot in the cache. These slots have a reference count, which is the number of client pointers that use it. When the reference count is zero, the slot can be reused. Each time gslt_render_font_glyph returns a bitmap, the corresponding slot has its reference count incremented. Therefore it is very important that you call gslt_release_font_glyph as soon as you do not need the bitmap anymore. If your code needs to pass around or hold multiple pointers to a glyph bitmap, then you may use the gslt_retain_font_glyph function to increment the reference count.\
\
If you do not released the bitmaps immediately after using them, the next call to gslt_render_font_glyph may also fail because the glyph cache has filled up. This can happen because it cannot evict old bitmaps that you still hold references to.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\b \cf0 Walking the outline\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b0 \cf0 \
Extract the outline data with a struct full of function pointers. The function will pass unhinted, untransformed coordinates scaled by 1000.\
\
	struct gslt_outline_walker_s\
	\{\
		void *user;\
		int (*moveto)(void *user, float x, float y);\
		int (*lineto)(void *user, float x, float y);\
		int (*curveto)(void *user, float x0, float y0,\
							float x1, float y1,\
							float x2, float y2);\
		int (*closepath)(void *user);\
	\};\
\
	int gslt_outline_font_glyph(gs_state *pgs, gslt_font_t *font, int gid,\
							gslt_outline_walker_t *walker);\
\
As usual, this function returns -1 if it fails. Return -1 from the callbacks to abort the outline extraction.\
}