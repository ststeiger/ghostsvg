%    Copyright (C) 2000 artofcode LLC.  All rights reserved.
% 
% This file is part of AFPL Ghostscript.
% 
% AFPL Ghostscript is distributed with NO WARRANTY OF ANY KIND.  No author or
% distributor accepts any responsibility for the consequences of using it, or
% for whether it serves any particular purpose or works at all, unless he or
% she says so in writing.  Refer to the Aladdin Free Public License (the
% "License") for full details.
% 
% Every copy of AFPL Ghostscript must include a copy of the License, normally
% in a plain ASCII text file named PUBLIC.  The License grants you the right
% to copy, modify and redistribute AFPL Ghostscript, but only under certain
% conditions described in the License.  Among other things, the License
% requires that the copyright notice and this notice be preserved on all
% copies.

% $Id$
% Redefine Font and CIDFont categories with FAPI-handeled fonts.

.FAPIavailable not {
  currentfile closefile
} if

languagelevel 2 .setlanguagelevel

% Define the Decoding resource category :
/Generic /Category findresource dup length dict copy
dup /InstanceType /dicttype put
/Decoding exch /Category defineresource pop

%========================= Process xlatmap ====================
{ % We convert it into a plain text to simplify the processing in C :
  % *(fontkind\0\0\ *(charmap\0decoding\0) ) \0
  mark
  (xlatmap) .runlibfile
  ()
  {                              % mark name array ... string
    1 index mark eq {
      exch pop exit
    } if
    2 index =string cvs concatstrings (\0\0) concatstrings
    3 2 roll pop exch            % mark ... string array
    dup length 1 sub 0 exch 2 exch
    {                            % mark ... string array i
      2 copy get                 % mark ... string array i cmap
      4 3 roll exch concatstrings (\0) concatstrings 
                                 % mark ... array i string
      2 index 3 2 roll 1 add get % mark ... array string DecodingName
      =string cvs concatstrings (\0) concatstrings
                                 % mark ... array string
      exch                       % mark ... string array
    } for
    pop                          % mark ... string
  } loop                         % string
  (\0) concatstrings
  systemdict exch /.xlatmap exch put
} bind exec


%====================================================================
% Redefine Font category with FAPIfontmap and CIDFont with FAPIfontmap :
10 dict begin    % a temporary dictionary for local binding.

%-------------------------------Font--------------------------------

/font_common  % - font_common -
{ currentdict /PaintType known not {
    /PaintType 0 def
  } if
  
  currentdict /Encoding .knownget not {
    //StandardEncoding
  } if
  dup type /nametype eq {
    /Encoding findresource
  } if
  /Encoding exch def

  Path .path_is_absolute not {
    /Path systemdict /GS_FAPIFONTPATH get pssystemparams /GenericResourcePathSep get 
    Path concatstrings concatstrings def
  } if
} bind def

/FontOptions 5 dict begin
  /make_procs currentdict def
  /NameKey /FontName def
  /TypeKey /FontType def

  1
  { /FontMatrix [0.001 0 0 0.001 0 0] def
    /FontBBox [-128 -128 1024 1024] def % zfapi.ps refines it.
    /Private 0 dict def
    /CharStrings << /.notdef () >> def
    //font_common exec
  } bind def

  42
  { /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def % zfapi.ps refines it.
    /CharStrings <<>> def
    /sfnts [<00010000 0000 0000 0000 0000 0000>] def
    /GlyphDirectory [] def
    //font_common exec
  } bind def

  %fixme : more font types.

currentdict end def


%---------------------------CIDFont---------------------------

/TranslateCSI   % <record> TranslateCSI <CSI>
{ begin
  << /Registry (Adobe) 
     /Ordering CSI aload pop 
     /Supplement exch 
  >>
  end
} bind def

/CIDFontOptions 5 dict begin
  /make_procs currentdict def
  /NameKey /CIDFontName def
  /TypeKey /CIDFontType def

  0
  { /CIDSystemInfo currentdict //TranslateCSI exec def
    currentdict /CSI undef
    /FontBBox [-128 -128 1024 1024] def % zfapi.ps refines it.
    /FDArray [
      14 dict begin
        /FontName CIDFontName =string cvs (%) concatstrings cvn def
        /FontType 1 def
        /FontMatrix [0.001 0 0 0.001 0 0 ] def
        /PaintType 0 def
        /Private 0 dict def
        currentdict
      end
    ] def
    /CIDCount 1000 def % fixme
    /GlyphDirectory [] def
    /GDBytes 1 def
    /FDBytes 0 def
  } bind def

  %fixme : more font types.

currentdict end def

%---------------------------common----------------------------

/complete_instance  % <font_name> <FontDict> <Options> complete_FAPI_Font <font_name> <FontDict>
{ begin
  dup length dict copy
  begin
  1 index NameKey exch def
  currentglobal true setglobal
  make_procs TypeKey load .knownget {
    exec
  } { setglobal
      /complete_instance cvx /invalidfont signalerror
  } ifelse
  setglobal
  currentdict end
  end
} bind def

/IsMyRecord      % <raw_record> -> <raw_record> bool
{ dup type /dicttype eq { dup /FAPI known } { false } ifelse
} bind def

/GetFilePath    % <scratch> <Name> <record> GetFilePath <filepath>
{ exch pop                       % (scratch) <record>
  /Path get                      % (scratch) (path)
  exch copy
  % Actually it is not a PS resource - unable to provide full conformity :
  % the attempt to run this file may fail.
} bind def

/GetSize        % <Name> <record> GetSize <size>
{ pop pop -1 % Unknown size.
  % fixme: probably we could provide an estimation size for some fonts.
} bind def

/FontRecordVirtualMethods 3 dict begin
  /GetFilePath //GetFilePath def
  /GetSize //GetSize def
  /MakeInstance   % <Name> <record> MakeInstance <Name> <Instance> <size>
  { //FontOptions //complete_instance exec
    2 copy //GetSize exec
  } bind def
currentdict end def

/CIDFontRecordVirtualMethods 3 dict begin
  /GetFilePath //GetFilePath def
  /GetSize //GetSize def
  /GetCSI //TranslateCSI def
  /MakeInstance   % <Name> <record> MakeInstance <Name> <Instance> <size>
  { //CIDFontOptions //complete_instance exec
    2 copy //GetSize exec
  } bind def
currentdict end def

%----------------------------------The Redefintion---------------------

/MappedCategoryRedefiner /ProcSet findresource /Redefine get /Redefine exch def

% Redefine the /Font category :
4 dict begin
  /CategoryName /Font def
  /MapFileName (FAPIfontmap) def
  /VerifyMap  { pop } bind def
  /PreprocessRecord  % <map> <Name> <raw_record> PreprocessRecord <map> <Name> <record> <bool>
  { //IsMyRecord exec dup {
      pop dup /RecordVirtualMethods //FontRecordVirtualMethods put
      true
    } if
  } bind def
currentdict end Redefine

% Redefine the /CIDFont category :
4 dict begin
  /CategoryName /CIDFont def
  /MapFileName (FAPIcidfmap) def
  /VerifyMap  { pop } bind def
  /PreprocessRecord  % <map> <Name> <raw_record> PreprocessRecord <map> <Name> <record> <bool>
  { //IsMyRecord exec dup {
      pop dup /RecordVirtualMethods //CIDFontRecordVirtualMethods put
      true
    } if
  } bind def
currentdict end Redefine

end % the temporary dictionary

%==================== A hook for buildfont* operators ====================

% The operaqtor .FAPIhook redirects PS fonts to FAPI on necessity.
% This depends on the following conditions :
%
% 1. If font dictionary has /FAPI entry, it is a font listed in extfontmap,
%    and must be build with .buildfontFAPI .
%
% 2. If the font dictionary has /Path entry, and has no /FAPI entry,
%    it is an installed PS font which was loaded with .loadfont .
%    Such font to be handled with native GS font renderer.
%    Rather we can try to redirect it to FAPI, we don't do this,
%    because a better way is user to list it in extfontmap.
%
% 3. Executing .loadfontloop, we place /FAPI_hook_disable in the 0th
%    element of some procedure on the execution stack - see gs_fonts.ps .
%    If FAPI_hook finds /FAPI_hook_disable in there, 
%    it knows that it is called for an installed font during difenefont.
%    In this case we don't need to redirect the font to FAPI.
%
% 4. If font dictionary has no /FAPI entry, and has no /Path entry,
%    it is an embedded font ( for installed fonts /Path entry is inserted by
%    .loadfontloop in gs_fonts.ps during execution of findfont ).
%    We need to write it to disk and call .passtoFAPI operator for
%    checking whether FAPI can handle it. If so, we insert /FAPI
%    entry into the dont dictionary and build it with .buildfontFAPI .
%    Othervise we build it with .buildfont1 or .buildfont42, etc.,
%    so as the font is handled with native GS font renderer.
%
% For debug purpose we define the flag FAPI_force_hook_installed_fonts
% for enforcing the redirection of installed fonts to FAPI.
%
% .FAPIhook is defined to systemdict for gs_type1.ps, gs_type42.ps, etc., to access 
% it independently of the order of definitions. This may be improved later.

5 dict begin     % A temporary dictionary for local binding.

/FAPI_hook_debug   % <proc> FAPI_hook_debug -
DEBUG { {exec} } { {pop} } ifelse
bind def
 
/FAPI_force_hook_installed_fonts false def

/encodingnames mark
 StandardEncoding /StandardEncoding
 ISOLatin1Encoding /ISOLatin1Encoding
 SymbolEncoding /SymbolEncoding
 DingbatsEncoding /DingbatsEncoding
 /resourceforall where
  { pop (*) { cvn dup findencoding exch } 100 string /Encoding resourceforall }
 if
.dicttomark def

/FAPI_choose_decoding  % <font> FAPI_choose_decoding <font>
{ dup /Decoding .knownget { 
    dup type /nametype eq {
          /Decoding findresource 1 index exch /Decoding exch put
        } {
          pop
        } ifelse
  } {
    dup /Encoding get                                    % <<font>> encoding
        dup type /nametype eq {
          /Decoding findresource 1 index exch /Decoding exch put
        } {
          dup //encodingnames
          exch .knownget {
            exch pop
            /Decoding findresource 1 index exch /Decoding exch put
          } {
            % unknown encoding, convert it to decoding :
                dup length dict begin
                /.notdef 0 def
                0 1 currentdict length 1 sub
                { dup 2 index exch get 
                  dup /.notdef ne {
                    exch def
                  } {
                    pop pop
                  } ifelse
                } for
                pop
                currentdict end
                1 index exch /Decoding exch put
          } ifelse
        } ifelse
  } ifelse
} bind def

/FAPI_is_hook_disabled     % - FAPI_is_hook_disabled <bool>
{ % checks whether execution stack contains packedarray started with /FAPI_hook_disable .
  /FAPI_hook_disable /MappedCategoryRedefiner /ProcSet findresource /execstack_lookup get exec
  null ne
  dup {
    { (FAPI_hook disabled) = } //FAPI_hook_debug exec
  } if
} bind def

/.FAPIhook  %      <string|name> <font_dict> .FAPIhook <string|name> <font>
{                                                     % name <<font>>
  { (FAPIhook ) print 1 index = } //FAPI_hook_debug exec
  dup /FAPI known {
    (Font ) print 1 index =string cvs print ( \( ) print dup 
    /FontName .knownget not { dup /CIDFontName get } if =string cvs print ( \) uses FAPI=) print dup /FAPI get =
    true .FAPIrebuildfont
    //FAPI_choose_decoding exec
  } {
    //FAPI_force_hook_installed_fonts                 % name <<font>> bHook
    dup {
      { (FAPI_force_hook_installed_fonts = true) = } //FAPI_hook_debug exec
    } {
      1 index /Path known {
        { (Path known, use native renderer) = } //FAPI_hook_debug exec
        pop false
      } {
        pop //FAPI_is_hook_disabled exec not
      } ifelse
    } ifelse
    {
      { (Trying to render ) print 1 index =string cvs print ( with FAPI) =} //FAPI_hook_debug exec
      .FAPIpassfont                                   % name <<font>> bool
      { (Font ) print 1 index =string cvs print ( is being rendered with FAPI=) print dup /FAPI get =
        false .FAPIrebuildfont                        % name <<font>>
        //FAPI_choose_decoding exec
      } { (Can't render font ) print 1 index =string cvs print ( with FAPI, will do with native GS renderer.) =
      } ifelse
    } if
  } ifelse
} bind def

% Redefine .buildfont* with FAPI :
/.buildfont1
{ //.buildfont1 exec //.FAPIhook exec
} bind

/.buildfont42
{ //.buildfont42 exec //.FAPIhook exec
} bind

/.buildfont9
{ //.buildfont9 exec //.FAPIhook exec
} bind

end
odef odef odef

.setlanguagelevel
