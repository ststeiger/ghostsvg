#!/usr/bin/env python2.1

#    Copyright (C) 2001 Artifex Software Inc.
# 
# This file is part of AFPL Ghostscript.
# 
# AFPL Ghostscript is distributed with NO WARRANTY OF ANY KIND.  No author or
# distributor accepts any responsibility for the consequences of using it, or
# for whether it serves any particular purpose or works at all, unless he or
# she says so in writing.  Refer to the Aladdin Free Public License (the
# "License") for full details.
# 
# Every copy of AFPL Ghostscript must include a copy of the License, normally
# in a plain ASCII text file named PUBLIC.  The License grants you the right
# to copy, modify and redistribute AFPL Ghostscript, but only under certain
# conditions described in the License.  Among other things, the License
# requires that the copyright notice and this notice be preserved on all
# copies.

# $Id$

#
# make_testdb <dir>
#
# this script creates the gstestdb database and intializes it
# with the md5sums of the test data files run through the
# baseline ghostscript

import gstestgs
import gsconf
import gssum
import gsparamsets
import anydbm
import os, sys
import string

def make_entry(ifile, device, dpi, band):
    ofile = "%s.%s.%d.%d" % (ifile, device, dpi, band)
    print "creating entry: " + ofile + "...",
    sys.stdout.flush()
    
    gs = gstestgs.Ghostscript()
    gs.command = gsconf.baselinegs
    gs.infile = gsconf.comparefiledir + ifile
    gs.outfile = ofile
    gs.device = device
    gs.dpi = dpi
    gs.band = band
    gs.gsoptions = gsconf.baselineoptions

    if not gssum.exists(ofile):
        if gs.process():
	    try:
       	        gssum.add_file(ofile)
    	        os.unlink(ofile)
    	        print "done."
            except OSError:
                print "no output produced."
        else:
	    print "error."
    else:
	print "exists."

# create the testdatadb
db = anydbm.open(gsconf.testdatadb, 'c')
db.close()

files = os.listdir(gsconf.comparefiledir)
for f in files:
    if f[-3:] == '.ps' or f[-4:] == '.pdf' or f[-4:] == '.eps':
	for params in gsparamsets.testparamsets:
            make_entry(f, params.device, params.resolution, params.banding)
